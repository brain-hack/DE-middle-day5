version: '2'

services:

  jupyter1:
    build:
      context: jupyter1
      dockerfile: ./Dockerfile.yml
    network_mode: "host"
    ports:
      - 8883:8883
    volumes:
      - ./jupyter1:/jupyter1

  jupyter2:
    build:
      context: jupyter2
      dockerfile: ./Dockerfile.yml
    network_mode: "host"
    ports:
      - 8884:8884
    volumes:
      - ./jupyter2:/jupyter2

  jupyter3:
    build:
      context: jupyter3
      dockerfile: ./Dockerfile.yml
    network_mode: "host"
    ports:
      - 8885:8885
    volumes:
      - ./jupyter3:/jupyter3

  jupyter4:
    build:
      context: jupyter4
      dockerfile: ./Dockerfile.yml
    network_mode: "host"
    ports:
      - 8886:8886
    volumes:
      - ./jupyter4:/jupyter4

  jupyter5:
    build:
      context: jupyter5
      dockerfile: ./Dockerfile.yml
    network_mode: "host"
    ports:
      - 8887:8887
    volumes:
      - ./jupyter5:/jupyter5

  kafka-flink-consumer:
    build:
      context: flink_consumer
      dockerfile: ./Dockerfile.yml
    network_mode: "host"
    ports:
      - 8889:8889
      - 8081:8081
    volumes:
      - ./flink_consumer:/root/DE-middle/flink/consumer/

  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ~/docker/zk-multiple-kafka-multiple/zoo1/data:/data
      - ~/docker/zk-multiple-kafka-multiple/zoo1/datalog:/datalog

  zoo2:
    image: zookeeper:3.4.9
    hostname: zoo2
    ports:
      - "2182:2182"
    environment:
        ZOO_MY_ID: 2
        ZOO_PORT: 2182
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ~/docker/zk-multiple-kafka-multiple/zoo2/data:/data
      - ~/docker/zk-multiple-kafka-multiple/zoo2/datalog:/datalog

  zoo3:
    image: zookeeper:3.4.9
    hostname: zoo3
    ports:
      - "2183:2183"
    environment:
        ZOO_MY_ID: 3
        ZOO_PORT: 2183
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ~/docker/zk-multiple-kafka-multiple/zoo3/data:/data
      - ~/docker/zk-multiple-kafka-multiple/zoo3/datalog:/datalog


  kafka1:
    image: confluentinc/cp-kafka:5.2.1
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ~/docker/zk-multiple-kafka-multiple/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3

  kafka2:
    image: confluentinc/cp-kafka:5.2.1
    hostname: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ~/docker/zk-multiple-kafka-multiple/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3

  kafka3:
    image: confluentinc/cp-kafka:5.2.1
    hostname: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ~/docker/zk-multiple-kafka-multiple/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3

  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ~/docker/mongo/data/db:/data/db
    container_name: "mongodb"
    ports:
      - "27017:27017"

  redis:
    image: redis:5.0.3
    hostname: redis
    labels:
      - "name=redis"
      - "mode=standalone"
    network_mode: "host"
    ports:
      - 6379:6379
    volumes:
      - ~/docker/docker/redis-5.0.3/data:/data
    command: redis-server
    environment:
      - REDIS_PASSWORD=password123

  rabbitmq:
    image: bitnami/rabbitmq:3
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - 4369:4369
      - 5672:5672
      - 25672:25672
      - 15672:15672
    volumes:
      - ~/docker/rabbitmq_data:/bitnami

  cassandra:
    image: bitnami/cassandra:3
    ports:
      - '7000:7000'
      - '9042:9042'
    volumes:
      - ~/docker/cassandra_data:/bitnami
    environment:
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_PASSWORD=cassandra

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - 8083:8083
      - 8086:8086
      - 8090:8090
    environment:
      - INFLUXDB_DATA_ENGINE=tsm1
      - INFLUXDB_REPORTING_DISABLED=false
    volumes:
      - ~/docker/influxdb/data:/var/lib/influxdb

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,briangann-gauge-panel,natel-plotly-panel,grafana-simple-json-datasource
    user: "0"
    links:
      - influxdb
    volumes:
      - ~/docker/grafana/data:/var/lib/grafana

  neo4j:
    image: bitnami/neo4j:3
    ports:
      - 7474:7474
      - 7473:7473
      - 7687:7687
    volumes:
      - ~/docker/neo4j_data:/bitnami









